package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"go.mongodb.org/mongo-driver/bson"

	"github.com/Jesuloba-world/social-sum/server/auth"
	"github.com/Jesuloba-world/social-sum/server/graph/model"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userInput model.UserInputData) (*model.User, error) {
	// validate input
	err := auth.ValidateSignupInput(auth.SignupInput{Email: userInput.Email, Name: userInput.Name, Password: userInput.Password})
	if err != nil {
		return nil, err
	}

	userCollection := r.DB.Database("Auth").Collection("User")

	hashedPassword, err := auth.HashPassword(userInput.Password)
	if err != nil {
		return nil, fmt.Errorf("failed to hash password: %s", err.Error())
	}

	user := auth.User{
		Email:    userInput.Email,
		Name:     userInput.Name,
		Password: hashedPassword,
		Status:   "I am new!",
	}

	user.SetTimestamps()

	// add to DB
	insertResult, err := userCollection.InsertOne(context.TODO(), user)
	if err != nil {
		return nil, fmt.Errorf("failed to create user: %s", err.Error())
	}

	// fetch created user
	filter := bson.M{"_id": insertResult.InsertedID}
	var createdUser auth.User
	err = userCollection.FindOne(context.TODO(), filter).Decode(&createdUser)
	if err != nil {
		return nil, fmt.Errorf("failed to fetch user: %s", err.Error())
	}

	var posts []*model.Post
	for _, id := range createdUser.Posts {
		post := &model.Post{
			ID: id.Hex(),
		}
		posts = append(posts, post)
	}

	return &model.User{
		ID:     createdUser.ID.Hex(),
		Email:  createdUser.Email,
		Name:   createdUser.Name,
		Status: createdUser.Status,
		Posts:  posts,
	}, nil
}

// Hi is the resolver for the hi field.
func (r *mutationResolver) Hi(ctx context.Context, name string) (string, error) {
	panic(fmt.Errorf("not implemented: Hi - hi"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
